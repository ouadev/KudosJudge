/**
 * queue.h
 * implementation of a queue holding the list of connection handles, these handles are to be
 * retrieved by the Worker threads and processed.
 */


#ifndef H_JUG_QUEUE
#define H_JUG_QUEUE
#include <pthread.h>
#include <semaphore.h>
#include <time.h>


#define DEBUG_THREADING 0
#define MAX_DEBUG_THREAD_STATES_COUNT 10000

#if DEBUG_THREADING

time_t debug_get_time();

struct debug_thread_state
{
    int thread_id;
    int state;
    time_t time;
    char* msg;
};

enum {THREAD_CREATED,THREAD_STARTED,THREAD_WORKING,THREAD_WAITING,THREAD_WAKED_UP,THREAD_STATE_COUNT};
extern char* debug_thread_state_names[THREAD_STATE_COUNT];
extern debug_thread_state debug_thread_states[MAX_DEBUG_THREAD_STATES_COUNT];
extern int debug_thread_states_count;

void debug_push_thread_state(debug_thread_state s);

#endif





/**
 * the structure that reprents the submission generated by Communication Interface Component
 */

typedef struct jug_submission
{
    char* source;
    char* input_filename;
    char* output_filename;
    int   language;
    int   time_limit;
    int   mem_limit;
} jug_submission;

/**
 * Submission Queue node
 */
struct jug_queue_entry
{
    jug_submission* submission;
    struct jug_submission_queue_entry* next;
} jug_queue_entry;

/**
 * the Queue main structure
 */
typedef struct jug_queue
{
    jug_queue_entry* head;
    jug_queue_entry* tail;
    pthread_mutex_t access_mutex;
    sem_t work_semaphore;
    
} jug_queue;

/**
 * the data we pass to the worker thread (shouldn't be here)
 */
typedef struct submission_worker_data
{
    jug_queue* work_queue;
    int thread_id;
    int state;
} submission_worker_data;

/**
 * @desc init the submission queue
 * @param queue the queue structure
 */
void init_submission_queue(jug_queue* queue);
/**
 *
 */
void push_submission(jug_queue* queue, jug_submission* submission);
/**
 *
 */
jug_submission* pop_submission(jug_queue* queue);
/**
 *
 */
void* judge_worker_proc(void* data);

#endif
